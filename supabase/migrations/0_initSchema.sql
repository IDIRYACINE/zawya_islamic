create table if not exists "userRoles" (
  "roleId" bigint generated by default as identity not null,
  "roleName" text null,
  constraint userRoles_pkey primary key ("roleId")
) tablespace pg_default;

create table if not exists schools ("schoolName" text null, "schoolId" uuid not null primary key) tablespace pg_default;

create table if not exists "users" (
  "userId" uuid not null,
  "userName" text null,
  "userRole" bigint null,
  "birthDate" date null,
  "schoolId" uuid null,
  constraint users_pkey primary key ("userId"),
  constraint users_userRole_fkey foreign key ("userRole") references "userRoles" ("roleId"),
  constraint users_schoolId_fkey foreign key ("schoolId") references "schools" ("schoolId")

) tablespace pg_default;


create table if not exists groups (
  "groupName" text null,
  "groupId" uuid not null,
  "schoolId" uuid null,
  constraint groups_pkey primary key ("groupId")
) tablespace pg_default;

create table if not exists "userGroups" (
  "userId" uuid not null,
  "groupId" uuid null,
  constraint userGroups_userId_fkey foreign key ("userId") references users ("userId") on delete cascade
) tablespace pg_default;


create table if not exists "studentEvaluations" (
  "userId" uuid not null,
  "evaluationSurat" Text default '',
  "evaluationAyat" Integer default 0,
  "presence" Integer default 0,
  "absence" Integer default 0,
  constraint studentEvaluations_userId_fkey foreign key ("userId") references users ("userId") on delete cascade
) tablespace pg_default;


create
or replace view "groupStudents" as
select
  users.*,
  "userGroups"."groupId"
from
  "userGroups"
  inner join users on "userGroups"."userId" = users."userId"
where
  users."userRole" = 2;

create
or replace view "teacherGroups" as
select
  groups.*,
  users."userId"
from
  "userGroups" 
  inner join users on "userGroups"."userId" = users."userId"
  inner join groups on "userGroups"."groupId" = groups."groupId"
where
  users."userRole" = 1;


create
or replace view "schoolStudents" as
select
  users.*
from
  "users" 
where
  users."userRole" = 2;  


create
or replace view "schoolTeachers" as
select
  users.*
from
  "users" 
where
  users."userRole" = 1;    


CREATE OR REPLACE FUNCTION create_student_evaluation()
RETURNS TRIGGER AS $$
BEGIN
  IF NEW."userRole" = 2 THEN
    INSERT INTO "studentEvaluations" ("userId") VALUES (NEW."userId");
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER check_user_role_and_insert_evaluation
AFTER INSERT ON "users"
FOR EACH ROW
EXECUTE FUNCTION create_student_evaluation();
